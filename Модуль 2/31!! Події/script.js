//============================================================
// ==================== Обробник подій =======================
//============================================================
// 1 СПОСІБ використати HTML атрибут (верстка) - НЕ ВИКОРИСТОВУВАТИ!
// <button onclick='alert("Click")' id="btn">Нажми меня</button>


//============================================================
// 2 СПОСІБ використати властивість DOM дерева для подій - МАЙЖЕ НЕ ВИКОРИСТОВУЮТЬ
// const btn = document.querySelector('button');
// btn.onclick = function() {
//   alert('Click');
// };


//============================================================
// 3 СПОСІБ - ПРАВИЛЬНИЙ
/* const btn = document.querySelector('button');
btn.addEventListener('click', (event) => { // ('подія', калбекФункція)
  alert('Click');
}); */


//======================== Спойлер ==========================
/* let btn = document.getElementById('clickMe');
let showText = document.querySelector('.text');

btn.addEventListener('click', () => {
  
  if(showText.style.display == "none") {
    showText.style.display = "block";
  } else {
    showText.style.display = "none";
  }
}); */

// події в JS виконуються в порядку черги


//============================================================
// ========================= Event ===========================
//============================================================

// інколи нам потрібно отримувати дані про той елемент з яким ми взаємодіємо 
// (що за подія відбулася, або що за елемент використовується, координати...).
// Для цього у нас є спеціальний об'єкт який називається event, який має свої властивості.
// Цей об'єкт події передається як аргумент у колбек функцію. Завжди першим аргументом.


/* const btnFirst = document.querySelector('button'); // вертає перший елемент який знайде на сторінці
//                      подія  колбек ф-ія
btnFirst.addEventListener('mouseenter', (e) => {
  console.log(e); // MouseEvent {isTrusted: true, screenX: 684, screenY: 163, clientX: 67, clientY: 83, …}
  console.log(e.target); //  <button id="btn">Нажми на мене </button>
  // завдяки об'єкту target який повертає нам елемент, ми можемо легко взаємодіяти з ним
  //e.target.remove(); // btn('button') просто видалиться із сторінки 
  e.target.style.color = 'blue'; // змінили колір
  console.log('Hover'); 
});  */


//============================================================
//===================== Видалення ф-ії =======================
//============================================================
// Для того аби мати змогу потім видалити ф-ію її необхідно винести в окрему переміну
/* const btnSecond = document.getElementsByTagName('button')[1];
let i = 0;

const deleteElement = (e) => {
  console.log(e.target);
  i++;
  if (i == 1) {
    btnSecond.removeEventListener('click', deleteElement);
  } // подідя спрацює лише 1 раз, так як після першої іерації i == 1 - виконається умова (видалення функції)
};

btnSecond.addEventListener('click', deleteElement); 
*/


//============================================================
//==================== Вспливаючі події ======================
//============================================================
// вспливаючі події - це коли оброблювач подій спочатку спрацьовує на самому вкладеному елементі,
// потім на батькові і вище та вище, піднімаючись по ірархії

/* const btn = document.querySelector('button'); // перша кнопка 
const overlay = document.querySelector('.overlay'); // батько

const bothOption = (e) => {
  console.log(e.target); // синтаксис який дозволяє відразу отримати доступ до класу, і проводити операції
  console.log(e.type); // тип події
};

overlay.addEventListener('click', bothOption);
btn.addEventListener('click', bothOption); */



//============================================================
//========= Відміна стандартної поведінки браузера ===========
//============================================================
// Відміняємо стандартну поведінку браузера(переход по силці, виділення тексту і т.п.)

/* const link = document.querySelector('a');

link.addEventListener('click', (event) => {
  event.preventDefault(); // відмінює стандартну поведінку браузера (не перейдемо по силці,
  // цей код розміщаємо в самий початок 
  console.log(event.target); // виведемо в консоль елемент взаємодії
}); */

// ============================================================
// ============= Подія не декілька елементів ==================
// ============================================================
// const showElement = (e) => {
//   // console.log(e.type); // тип події
// };
// або 
function showElement (e) {console.log(e.target);}

// Для того аби повісити подію на декілька елементів потрібно перебрати елементи
const btns = document.querySelectorAll('button');
btns.forEach((btn) => {
  btn.addEventListener('click', showElement, {once: true}); 
// елемент.обробник(подія,активація функції,{параментр який вказує на виконання події лише 1 раз})
});

// ============================================================
// function name (аргумент1, аргумент2) {тіло ф-ії};
// (event, аргумент2) => {тіло ф-ії}; 