"use strict";
// ===================================================
// ============= ПОСИЛАННЯ НА ОБ'ЄКТІВ ===============
// ===================================================
// якщо ми працюємо з примітивними типами даних, то вони передються по значенню. Якщо працюємо з об'єктами, то передача йде по силці

/* const obj = {
  a: 5,
  b: 1
};
const copy = obj;
copy.a = 10; // змінюючи щось в середині копії ми змінюємо вихідний об'єкт також,
// тому що новостворений об'єкт не склонований, а просто існує у вигляді посилання на дані з вихідного об'єкту.
console.log(copy); // 10
console.log(obj); // 10 */



// ===================================================
// 1 =========== ПОВЕРХНЕВА КОПІЯ ОБ'ЄКТІВ ===========
// ===================================================
function copy(mainObj) {
  let objCopy = {};
  let key;
  for (key in mainObj) {
    objCopy[key] = mainObj[key];
  }

  return objCopy;
}

const numbers = {
  a:2,
  b: 5,
  c: {
    x: 7,
    y: 4
  }
};

const newNumbers = copy(numbers);
newNumbers.a = 10; // { a: 10, b: 5, c: { x: 8, y: 4 } }
newNumbers.c.x = 8; // { a: 2, b: 5, c: { x: 8, y: 4 } }
console.log(newNumbers);
console.log(numbers);
// У такому випадку значення 8 підставиться у скопійований та вихідний об'єкт, 
// тому що дана копія являється поверхневою. І має доступ до властивостей лише першого рівня (a, b, c).
// Для вкладиних с: {x: 7, y: 4} структур даний метод не підходить.



// ==================================================
// 2 =========== ОБ'ЄДНАННЯ ДВОХ ОБ'ЄКТІВ ===========
// ==================================================
/* const numbers = {
  a:2,
  b: 5,
  c: {
    x: 7,
    y: 4
  }
};
const add = {
  d:17,
  e:20
};
console.log(Object.assign(numbers, add)); */



// ==================================================== 
// 3! =========== ПОВЕРХНЕВА КОПІЯ ОБ'ЄКТІВ ===========
// ====================================================  
const add = {
  d:17,
  e:20
};

const clone = Object.assign({}, add); // створюємо новий пустий об'єкт і поміщаємо в нього старий
clone.d = 5; // значення d перезапишеться і буде лише у новому об'єкті
console.log(add); // {d: 17, e: 20}
console.log(clone); // {d: 5, e: 20}



// =========================================================
// =========== КЛОНУВАННЯ ТА РЕДАГУВАННЯ МАСИВІВ ===========
// =========================================================
/* const oldArray = ['a', 'b', 'c'];
const newArray = oldArray.slice(); // метод що дозволяє скопіювати старий масив 

newArray[1] = 'new string'; // замінюємо значення першої властивості
console.log(newArray); // ['a', 'new string', 'c']
console.log(oldArray); // ['a', 'b', 'c'] */




// ==================================================================
// 4! =========== Розгорнення структури з допомгою spread ===========
// ==================================================================
// Оператор spread розгортає cтруктури на окремі елементи
/* const video = ['youtube', 'vimeo', 'rutube'],
         blogs = ['wordpress', 'livejournal', 'bloger'],
         internet = [...video,...blogs, 'vk', 'facebook'];

console.log(internet); */

/* function log(a, b, c) {
  console.log(a);
  console.log(b);
  console.log(c);
}
const num = [2, 5, 7];
log(...num); // масив переданий у функції розкладеться на 3 окремих елемента */



// ==================================================================
// =========== ПОВЕРХНЕВА КОПІЯ МАСИВІВ/ОБ'ЄКТІВ spread =============
// ============================ МАСИВ ===============================
const array = ['a', 'b'];
const newArray = [...array]; // тепер тут лежить нова копія масиву array 
console.log(newArray);

// ============================ ОБ'ЄКТ ==============================
const q = {
  one: 1,
  two: 2
};

const newObj = {...q}; // поміщаємо в новий об'єкт дані за допомогою spread
console.log(newObj);