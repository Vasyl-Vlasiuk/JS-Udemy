'use stricts';

// Функція по своїй суті являється об'єктом, і в неї мона записати якісь методи та властивості.

// Довгий синтаксис для створення типів даних
const num =new Number(3);

// Ф-ція конструктор з її допомогою можна створювати нових користувачів.Тобто створювати нові О
function User(name, id) {
  this.name = name;
  this.id = id;
  this.human = true;
  // Окрім властивестей ми можемо також використувати методи
  this.hello = function() {
    console.log(`Hello ${this.name}`);
  };
}

// Коли Ф викликається за допомогою нового слова new вона створює новий О з тими властивостями, які ми в неї записали
const ivan = new User ('Ivan', 28); // в середині цієї перемінної у нас знходиться вже не Ф а О
ivan.hello();

console.log(ivan);



// ===================================================================
// За допомогою прототайп ми можемо добавляти, нові методи чи властиввості в наш конструктор. І вони будуть прототипно наслідуватися у потомків.
function Member (name, id) {
  this.name = name;
  this.id = id;
  this.human = true;
  // Окрім властивестей ми можемо також використувати методи:
  this.hello = function() {
    console.log(`Hello ${this.name}`);
  };
}

Member.prototype.exit = function(name) {
  console.log(`Користувач ${this.name} пішов`);
};

const alex = new Member('Alex', 20);

alex.exit();


// Конструктори потрібні для створення нових прототипних об'єктів